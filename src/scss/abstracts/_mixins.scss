/*
 * Mixins
 * Reusable SCSS patterns and functions
 */

// Media Query Mixins
@mixin respond-to($breakpoint) {
    @if $breakpoint == xs {
      @media (max-width: #{$breakpoint-sm - 1px}) {
        @content;
      }
    } @else if $breakpoint == sm {
      @media (min-width: $breakpoint-sm) {
        @content;
      }
    } @else if $breakpoint == md {
      @media (min-width: $breakpoint-md) {
        @content;
      }
    } @else if $breakpoint == lg {
      @media (min-width: $breakpoint-lg) {
        @content;
      }
    } @else if $breakpoint == xl {
      @media (min-width: $breakpoint-xl) {
        @content;
      }
    } @else if $breakpoint == xxl {
      @media (min-width: $breakpoint-xxl) {
        @content;
      }
    }
  }
  
  // Flexbox mixins
  @mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
    flex-wrap: $wrap;
  }
  
  // Position mixins
  @mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
  }
  
  @mixin absolute($top: null, $right: null, $bottom: null, $left: null) {
    @include position(absolute, $top, $right, $bottom, $left);
  }
  
  @mixin relative($top: null, $right: null, $bottom: null, $left: null) {
    @include position(relative, $top, $right, $bottom, $left);
  }
  
  @mixin fixed($top: null, $right: null, $bottom: null, $left: null) {
    @include position(fixed, $top, $right, $bottom, $left);
  }
  
  // Size mixins
  @mixin size($width, $height: $width) {
    width: $width;
    height: $height;
  }
  
  // Typography mixins
  @mixin font-style($size: null, $weight: null, $line-height: null, $family: null) {
    font-size: $size;
    font-weight: $weight;
    line-height: $line-height;
    font-family: $family;
  }
  
  @mixin heading-1 {
    font-size: $font-size-3xl;
    font-weight: $font-weight-bold;
    line-height: $line-height-tight;
    
    @include respond-to(md) {
      font-size: $font-size-4xl;
    }
  }
  
  @mixin heading-2 {
    font-size: $font-size-2xl;
    font-weight: $font-weight-bold;
    line-height: $line-height-tight;
    
    @include respond-to(md) {
      font-size: $font-size-3xl;
    }
  }
  
  @mixin heading-3 {
    font-size: $font-size-xl;
    font-weight: $font-weight-semibold;
    line-height: $line-height-snug;
    
    @include respond-to(md) {
      font-size: $font-size-2xl;
    }
  }
  
  // Container mixins
  @mixin container {
    width: 100%;
    padding-right: $spacing-4;
    padding-left: $spacing-4;
    margin-right: auto;
    margin-left: auto;
    
    @include respond-to(sm) {
      max-width: $container-max-width-sm;
    }
    
    @include respond-to(md) {
      max-width: $container-max-width-md;
    }
    
    @include respond-to(lg) {
      max-width: $container-max-width-lg;
    }
    
    @include respond-to(xl) {
      max-width: $container-max-width-xl;
    }
    
    @include respond-to(xxl) {
      max-width: $container-max-width-xxl;
    }
  }
  
  // Button mixins
  @mixin button-base {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    cursor: pointer;
    user-select: none;
    border: 1px solid transparent;
    padding: $spacing-2 $spacing-4;
    font-size: $font-size-base;
    font-weight: $font-weight-medium;
    line-height: $line-height-normal;
    border-radius: $border-radius;
    transition: $transition-base;
  }
  
  @mixin button-variant($bg-color, $text-color, $hover-bg: darken($bg-color, 10%), $hover-text: $text-color) {
    background-color: $bg-color;
    color: $text-color;
    
    &:hover, &:focus {
      background-color: $hover-bg;
      color: $hover-text;
    }
    
    &:active {
      background-color: darken($hover-bg, 5%);
    }
  }
  
  // Card mixins
  @mixin card {
    position: relative;
    display: flex;
    flex-direction: column;
    min-width: 0;
    word-wrap: break-word;
    background-color: $color-white;
    background-clip: border-box;
    border: 1px solid $color-light-gray;
    border-radius: $border-radius;
    box-shadow: $shadow-sm;
    transition: $transition-base;
    
    &:hover {
      box-shadow: $shadow;
    }
  }
  
  // Truncate text
  @mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  // Hide text (for screen readers)
  @mixin visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  // Clearfix
  @mixin clearfix {
    &::after {
      content: "";
      display: table;
      clear: both;
    }
  }
  
  // Grid system
  @mixin make-row($gutter: $spacing-4) {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$gutter / 2;
    margin-left: -$gutter / 2;
  }
  
  @mixin make-col($size, $columns: 12, $gutter: $spacing-4) {
    flex: 0 0 auto;
    width: percentage($size / $columns);
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }